# 자료구조가 가지고 있는 공통적인 것

 - 자료구조는 값들의 모음으로 헤당 데이터에 적용되는 값들 및 기능 혹은 작업들 사이에 관계를 포함  ex) 배열: 값들의 순서, push, pop등


# 자료구조의 종류가 많은 이유

 - 특정 유형의 문제에 있어서 특정한 자료구조가 효율적이기 때문


# 자료구조를 배워야 하는 이유

 - 고급 자료구조를 사용할 수 있어야 필요할 때 적용 가능하기 때문

 - 이미 여러구조를 사용하고 있기 때문

 - 면접할 때에도 자주 사용됨


# ES2015 클래스 구문 학습 목표

 1. 클래스는 무엇인가

 2. 자바스크립트에서 클래스 개념을 어떻게 구현하는가

 3. 추상화, 캡슐화, 다형성 정의

 4. ES2015를 이용해 자료구조 만들어 보기


# 클래스는 무엇인가

 - 사전 정의된 속성 및 메소드를 이용해 객체를 생성하기 위한 청사진

 - 수 많은 자료구조를 클래스로 구현할 예정

 - 엄밀히 이야기하면 자바스크립트는 객체 지향이 아님

# 클래스 키워드

class Student {
    constructor(firstName, lastName) {
        this.firstName = firstName;
        this.lastName = lastName;
    }
}

let firstStudent = new Student("Colt", "Steele");
let secondStudent = new Student("Blue", "Steele");

# 클래스에 instance 메소드 추가

class Student {
    constructor(firstName, lastName) {
        this.firstName = firstName;
        this.lastName = lastName;
    }
    fullName(){
        return `Your full name is ${this.firstName} ${this.lastName}`;
    }
}

let firstStudent = new Student("Colt", "Steele");

firstStudent.fullName();

# 클래스 메소드 추가

 - static 키워드를 사용하는 스태틱 메소드

 - 스태틱 메소드는 인스턴스화 없이도 호출될 수 있으며, 클래스 인스턴스를 통해서는 호출될 수 없음

 - 애플리케이션의 유틸리티 기능을 생성하기 위해 자주 사용됨

class Student {
    constructor(firstName, lastName) {
        this.firstName = firstName;
        this.lastName = lastName;
    }
    fullName(){
        return `Your full name is ${this.firstName} ${this.lastName}`;
    }
    
    static enrollStudents(...students) {
        // maybe send email here
    }
}

let firstStudent = new Student("Colt", "Steele");
let secondStudent = new Student("Blue", "Steele");

Student.enrollStudents([firstStudent, secondStudent])


# 클래스로 자료구를 만드는 기본구조

class DataStructure() {
    constructor() {
        // what default properties should it have?
    }
    someInstanceMethod() {
        // what should each object created from this class be able to do?
    }
}