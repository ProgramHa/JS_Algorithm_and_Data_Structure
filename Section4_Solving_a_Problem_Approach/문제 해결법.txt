$ 목표

- 알고리즘의 정의

- 알고리즘 해결 계획

- 계획의 비교와 대조 및 빈도 카운터, 투 포인터, 분할 정복 등을 수립


# 알고리즘이란?

 - 특정 작업을 달성하기 위한 과정이나 일련의 단계


# 알고리즘을 알아야하는 이유

 - 프로그래밍에서 수행하는 아주 기본적 작업에서 복잡한 어플리케이션을 구축할 때에도 일종의 알고리즘이 포함됨

 - 따라서 문제을 해결할 방법을 마련할 수 있도록 결정해야함


# 알고리즘을 더 잘 이해하는 법

 1. 문제 해결을 위한 계획 수립

 2. 일반적인 문제 해결 패턴을 파악


# 문제 해결을 위한 단계
 
 1단계: 문제 이해하기

 2단계: 구체적 예제 알아보기

 3단계: 문제 세분화 하기

 4단계: 문제 해결 및 단순화

 5단계: 문제 복습 및 재구성


# 1단계: 문제의 이해

 - 참고할 만한 좋은 책 '어떻게 문제를 풀 것인가 - George Polya'

 1. 문제를 나의 방식대로 다시 생각할 수 있는가?

 2. 문제가 어떤 입력값을 담고 있는지 이해하고 있는가?

 3. 문제의 해결책에서 나와야 할 결과값은 무엇일까?

 4. 입력값이 출력값을 결정할 수 있을까? = 문제를 풀기위한 충분한 정보가 주어졌는지 확인
   
   ㄴ 주어진 정보만 이용해서 문제를 풀 수 있는가?
 
 5. 문제의 일부인 데이터의 중요한 부분에 어떻게 라벨을 지정할 수 있을까? = 문제에서 무엇이 가장 중요한가
   
   ㄴ 라벨을 뭘 쓸지, 어떤 용어를 사용할 지


(예제)
두 숫자를 가지고 합계를 반환하는 함수 작성

// 1. 문제를 나의 방식대로 다시 생각할 수 있는가?
"implemet addition"
// 2. 문제가 어떤 입력값을 담고 있는지 이해하고 있는가?
    // ints?
    // float?
    // 엄청 큰 숫자를 위한 string은 어떨까?
// 3. 문제의 해결책에서 나와야 할 결과값은 무엇일까?
    // ints? float? string?
// 4. 입력값이 출력값을 결정할 수 있을까? = 문제를 풀기위한 충분한 정보가 주어졌는지 확인

// 5. 문제의 일부인 데이터의 중요한 부분에 어떻게 라벨을 지정할 수 있을까? = 문제에서 무엇이 가장 중요한가
   