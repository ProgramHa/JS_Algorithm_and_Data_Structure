# 섹션 목표

- 빅오의 시점으로 배열과 객체가 어떻게 작동하는지 이해

- 왜 배열 앞에 데이터를 추가하는 것이 안좋은지 확인

- 다른 좋은 대안이 있는지 배열을 처리하는 시간으로 비교 (+ 내장된 메소드와 foreach 등등..)


# 객체의 빅오

let instructor = {
    firstName: "Kellyy",
    isInstructor: true,
    favoriteNumbers: [1,2,3,4]
}
 ㄴ 정렬되어 있지않은 데이터 구조이며 Key와 Value를 가지고 있음

언제 객체를 쓰는가?

- 정렬되어 있을 필요가 없을 때 잘 작동

- 빠른 접근과 입력, 삽입, 삭제를 시도할 때 좋음

객체의 빅오 시간

삽입 = O(1)

삭제 = O(1)

탐색 = O(N)

접근 = O(1)

객체 메소드의 빅오 시간

Object.keys = O(N)

Object.values = O(N)

Object.entries = O(N)

hasOwnProperty = O(1)

퀴즈 1

Q1 오브젝트에 키와 값을 추가하기 위한 빅오는?
 ㄴ O(1)

Q2 오브젝트의 키에 접근하기 위한 빅오는?
 ㄴ O(1)

Q3 오브젝트의 키를 제거하기 위한 빅오는?
 ㄴ O(1)


# 배열의 빅오와 객체와 비교

let names = ["Michael", "Melissa", "Andrea"];

let values = [ture, {}, [], 2, "awesome"];

$ 배열을 사용하는 상황들
 ㄴ 정렬이 필요할 때
 ㄴ 빠른 데이터 접근이 필요할 때 (대신 입력과 삭제시 성능하락이 있을 수 있음)

배열의 빅오 시간

삽입 = 입력 값에 의존  =>  배열의 끝에 데이터를 push하면 O(1)이지만, 처음에 데이터를 넣으면 O(N)

삭제 = 입력 값에 의존  =>  배열의 끝에 데이터를 pop하면 O(1)이지만, 처음에 데이터를 삭제하면 O(N)

탐색 = O(N)

접근 = O(1)

# 배열 메소드 들의 빅오

push - O(1)

pop - O(1)

shift, unshift, concat, slice, splice - O(N)

sort - O(N * logN)

foreach, map, filter, reduce, etc.. - O(N)


- 객체는 거의 모든 것을 빠르게 하지만 정렬되어 있지 않음

- 배열은 정렬되어 있지만, 끝에 추가하고 삭제하는 작업이 시작에 추가하고 삭제하는 작업보다 빠름 (중간도 같음)

퀴즈2

Q1 배열 안에 데이터를 삽입하는 빅오
 ㄴ O(1)

Q2 배열 안에 데이터를 이동하는 빅오
 ㄴ O(n)

Q3 foreach함수를 위한 빅오
 ㄴ O(n)