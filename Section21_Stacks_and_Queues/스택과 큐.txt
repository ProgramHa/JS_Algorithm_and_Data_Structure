# 스택의 학습 목표

 1. 스택의 정의

 2. 스택의 활용 사례

 3. 스택 자료구조의 연산 구현


# 스택이란?

 - Last In First Out (LIFO) 형태의 자료구조

 - 호출 스택의 스택이 지금 배우는 스택

 - 프로그래밍 언어들은 자체적인 스택 자료구조를 가짐 (강의에서는 스택을 구현 하기위해 배열, 리스트를 사용)

 - 자바스크립트에는 내장된 자료구조가 아니지만 구현하기에는 쉬움

# 스택의 주요 사용처

 - 함수 호출을 다루는 상황

 - Undo와 Redo를 구현

 - 인터넷 브라우저의 방문기록 구현

 - 강의의 알고리즘 구현

# 배열로 스택 구현

 - 배열에서는 push, pop 또는 unshift, shift를 사용하는 방법이 있음

 - unshift를 사용하는 것 보다는 push를 사용하는 편이 좋음

   ㄴ unshift를 사용하면 배열의 인덱스를 다 다시 부여해야 하기때문

 - 데이터가 엄청 많은 경우라면 모든 데이터에 인덱스가 있을 필요가 없기에 리스트로 구현하는 편이 좋음

# 연결 리스트로 스택 구현

 - 스택에서는 push와 pop이 상수값 시간을 가져야 함

 - 우리가 구현한 단방향 연결 리스트 pop은 반복문을 사용하기 때문에 상수값이 아님

 - 그래서 명명은 push와 pop이지만 unshift와 shift를 사용

% push 의사코드

 - value를 인수로 받는 함수 작성

 - value 인수로 새로운 노드 생성

 - 만약 노드가 스택에 없다면 first와 last 값을 새로 생성된 노드로 지정

 - 만약 스택에 노드가 하나 이상 있는 경우 현재 fisrt값을 저장할 변수를 생성된

 - first값을 새로 생성된 노드로 지정

 - 새로 생성된 노드의 next값을 이전 노드를 저장한 변수로 지정

 - stack 크기 +1

% pop 의사코드
 
 - 만약 스택에 노드가 없다면 null을 반환

 - 아니라면 임시 변수에 스택의 first값을 저장

 - 만약 스택에 노드가 1개 남았다면 first와 last값을 null로 지정

 - 만약 스택에 노드가 하나 이상인 경우 first값을 현재 first 다음 요소로 지정

 - stack 크기 -1

 - 삭제한 노드 값 출력

# 스택의 Big O

 - 삽입: O(1)

 - 삭제: O(1)

 - 탐색: O(N)

 - 접근: O(N)