# 이번 섹션의 목표

1. 빅오 표기법의 필요성

2. 빅오 표기법은 무엇인가

3. 간단한 빅오 표기법

4. "시간 복잡성"과 "공간 복잡성"을 정의

5. 빅오 표기법을 통해 여러 알고리즘을 평가

6. 로그가 무엇인가

-------------------------------------------------------

# 빅오 표기법의 필요성

- 여러가지 문제를 해결하는 방법 중 어느 것이 좋은 지 알아보기 위해 필요함

% 작동만 하면 되는 거 아님?? ㄴㄴ

 = 면접이나, 코드 챌린지, 수천개의 데이터셋을 다루는 대기업에서 알고리즘 처리 속도가 빠르면 성능이 좋아지기 때문

- 코드의 성능을 얘기하기 위해 정확한 전문 용어를 사용하는 것이 중요

- 알고리즘 별로 장단점이 있고 적재적소에 활용해야 함

- 내 코드에서 렉을 유발하는 비효율적인 부분을 찾을 수 있음

- ※중요※ 면접에 자주나올 정도로 중요함!!

-------------------------------------------------------

# 코드 시간 재기

예제) 1에서 부터 특정한 N값 사이에 있는 모든 숫자들을 더하는 함수

% 가장 생각하기 쉬운 해결법 
function addUpTo(n) {
    let total = 0;
    for (let i = 1; i <= n; i++) {
        total += 1;
    }
    return total;
}

% 좀 더 짧은 버전
function addUpTo(n) {
    return n * (n + 1) / 2;
}

# 위의 두 코드 중 더 좋은 코드는 무엇일까?

- 실행이 빠른 것? 

- 메모리를 덜 사용하는 것?

- 코드를 쉽게 읽을 수 있는 것?

= 상황에 따라 다르지만 빠르면서 메모리를 덜 사용하면 좋음

# 코드를 평가하는 방법

- 쉬운 방법: 내장된 타이밍 펑션 이용

function addUpTo(n) {
    let total = 0;
    for (let i = 1; i <= n; i++) {
        total += 1;
    }
    return total;
}

let t1 = performance.now();  // 브라우저가 페이지를 만들어 창이 열린 시간을 알려줌
addUpTo(1000000000);
let t2 = performance.now();
console.log('Time Elapesd: ${(t2 - t1) / 1000} seconds.')

= 비교시 1번 코드보다 2번 코드의 실행 시간이 짧음

  - 이 방법은 부정확함
   ㄴ 기기마다 다르게 측정됨
   ㄴ 같은 기기에서도 다르게 측정됨
   ㄴ 몇몇 빠른 알고리즘은 너무 빨라서 측정이 제대로 안 될 수 있음

- 그럼 어떻게 측정하면 좋을까?