# 학습 목표

 - 재귀가 무엇이며, 어떻게 유용한지 정의

 - 재귀 함수 작성의 두 가지 핵심 구성요소 이해

 - call stack과 재귀의 연관성을 파악하고 재귀함수 디버깅

 - 헬퍼 메소드 재귀와 순수 재귀를 정의하고 두 가지를 비교


# 재귀의 공식적인 정의

 - 재귀: 자기자신을 호출하는 절차

 - 사용처
 
 ㄴ JSON.parse / JSON.stringify

 ㄴ document.getElementById와 DOM 순회 알고리즘

 ㄴ 객체 순회

 ㄴ 직접 만든 데이터 구조/트리/그래프를 검색할 때

 ㄴ 반복문을 쓰는 것 보다 깔끔하게 작성할 때


# 스택 호출하기

 - 함수를 호출하면 스택에 함수를 Push

 - JS에서는 return 키위드를 만나거나 함수에 실행할 구문이 없으면 컴파일러가 함수를 Pop


# 재귀함수의 필수 구성 요소

 - 재귀함수를 종료하기 위해 종료 조건(Base Case)을 설정한다

 - 재귀함수는 자기 자신을 호출 스택에 쌓을 때 매번 다른 데이터를 가지고 함수를 호출한다


(예제) 첫 번째 간단한 재귀함수

function countDown(num) {
    if(num <= 0) {
        console.log("All done!");
        return;
    }
    console.log(num);
    num--;
    countDown(num);
}


퀴즈 1

Q1. 자바스크립트는 함수를 호출하기 위해 어떤 도구를 사용하는가?
 
 ㄴ 스택 호출

Q2. Base Case는 무엇인가?

 ㄴ 재귀가 끝난 상태


(예제) 두 번째 재귀 함수

function sumRange(num) {
    if(num === 1) return 1;
    return num + sumRange(num-1);
}

# 팩토리얼 만들기

% 반복문

function factorial(num) {
    let total = 1;
    for(let i = num; i > 1; i--) {
        total *= i
    }
    return total;
}

% 재귀적 방법

function factorial(num) {
    if(num === 1) return 1;
    return num * factorial(num - 1);
}


# 재귀함수를 사용할 때 발생하는 문제점들

 - 종료 조건 없음   - 무한히 자기 자신을 호출

 - 잘못된 값 반환 또는 반환을 잊음  - 마찬가지로 무한히 자기 자신을 호출

 - 무한히 재귀하면 스택 오버플로우가 발생


# Helper 메소드 재귀

 - 배열이나 데이터 목록을 컴파일 할 때 사용

(예제1)
function outer(input) {     // 메인 외부 함수

    var outerScopedVariable = []

    function helper (helperInput) {     // 내부 재귀 함수
        // modify the outerScopedVariable
        helper(helperInput--)
    }

    helper(input)

    return outerScopedVariable;
}

(예제2)
function collectOddValues(arr) {

    let result = []

    function helper (helperInput) {     // 내부 재귀 함수
        if(helperInput.length === 0) {
            return;
        }

        if(helperInput[0] % 2 !== 0) {
            result.push(helperInput[0])
        }

        helper(helperInput.slice[1])
    }

    helper(arr)

    return result;
}

