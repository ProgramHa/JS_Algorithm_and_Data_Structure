# 학습목표

 1. 양방향 연결 리스트 작성

 2. 단방향 연결 리스트와 비교

 3. 단방향 연결 리스트의 기본 연산과 비교


# 양방향 연결 리스트의 작동 방식

 - 기본적으로 단방향 연결 리스트와 비슷하지만 next말고도 prev요소가 있음

 - prev요소가 있기 때문에 맨 끝 요소를 찾거나 역순으로 순회할 때 유용하다

 - 다양한 유용성 === 더 많은 메모리


# 의사코드

push 메소드

 - 값을 가지는 새로운 노드를 생성하고 head가 null인지, 리스트 길이가 0인지 확인
 
 - 만약 head가 null이면(또는 리스트 길이가 0이면) head와 tail을 새로 만든 노드로 지정

 - 만약 아니라면 현재 tail을 찾아 tail노드의 next값을 새로운 노드로 설정

 - 새로만든 노드의 prev값을 이전 tail 노드로 설정

 - tail의 값을 새로만든 노드로 지정

 - 연결 리스트 길이 +1

 - 리스트 반환

pop 의사코드

 - 만약 head가 null이면(또는 리스트 길이가 0이면) undefined를 반환

 - 만약 아니라면 현재 tail을 출력할 수 있도록 변수에 저장

 - 만약 리스트의 길이가 1이라면 head와 tail을 null로 설정

 - 이전 노드가 tail이 되도록 설정

 - 새로 지정된 tail의 next를 null로 설정

 - 연결 리스트의 길이 -1

 - pop한 값 반환

shift 의사코드

 - 만약 head가 null이면(또는 리스트 길이가 0이면) undefined를 반환

 - 아니라면 head값을 변수에 저장 (oldHead)

 - 만약 리스트의 길이가 1이라면 head와 tail을 null로 설정

 - head값을 이전 head값으로 설정

 - head값의 prev값을 null로 설정

 - oldHead의 next값을 null로 설정

- 연결 리스트의 길이 -1

 - shift한 값 반환

unshift 의사코드

 - 값을 가지는 새로운 노드 생성

 - 만약 리스트의 길이가 0이면 head와 tail을 새로 생성된 노드로 설정

 - 아니라면 현재 headd의 prev값을 새로운 노드가 되도록 설정

 - 새로운 노드의 next값을 현재 head로 설정

 - head를 새로운 노드로 설정

 - 리스트의 길이 +1

 - 리스트를 반환