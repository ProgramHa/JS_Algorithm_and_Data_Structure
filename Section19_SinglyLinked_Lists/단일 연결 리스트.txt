# 학습 목표

 1. 단일 연결 리스트가 무엇인가

 2. 내장 배열 구조와 비교

 3. 단일 연결 리스트 클래스 정의 및 데이터의 삽입, 추출등


# 연결 리스트

 - 값과 위치 포인터 값을 저장하는 노드들 끼리 연결되어 구성된 데이터 구조

 - head: 연결 리스트의 시작 노드, tail: 연결 리스트의 마지막 노드 | 중간에 있는 노드를 추적 하지않음


# 배열과 연결리스트의 차이

 $ 리스트: 인덱스가 없음, 다음 노드까지 next 포인터로 연결됨, 임의 접근이 불가능하고 순차 접근만 가능 

 $ 배열: 인덱스로 순서를 매김, 새로운 항목을 추가하기 힘듬, 임의 접근이 가능


# 의사코드

push 의사코드

 - 주어진 값을 받아 새로운 노드 생성
 
 - 만약 head가 없다면 head와 tail을 새로운 노드를 가리키도록 함

 - 리스트가 비어있지 않다면 마지막 노드의 next를 새로 생성된 노드를 가리키도록 하고 길이에 +1

 - 연결 리스트를 반환

pop 의사코드

 - 만약 노드가 리스트에 없으면 undefined를 반환 (리스트 확인: head가 null, 리스트 길이가 0)

 - 비어있지 않다면 tail에 이를 때까지 전체 리스트를 반복하며 따라감

 - 마지막에서 두 번째 노드의 next를 null로 설정하고 tail값을 마지막에서 두 번째 노드로 변경

 - 리스트의 길이를 -1

 - 금방 제거한 노드를 반환

shift 의사코드

 - 만약 노드가 없다면 undefined를 반환

 - 비어있지 않다면 head 속성을 변수에 저장

 - 현재 head의 next 노드를 가리키도록 head 속성을 업데이트

 - 리스트의 길이를 -1

 - 제거된 이전 head 노드의 값 반환

unshift 의사코드

 - 시작 위치에 추가하려는 새로운 노드를 생성

 - 만약 head가 없을 경우 head와 tail 모두를 새로운 노드를 가리키도록 설정

 - 이미 있다면 새로운 노드의 next를 현재의 head 값으로 설정 

 - head를 새로운 노드로 설정하고

 - 리스트의 길이를 +1

 - 연결 리스트를 반환