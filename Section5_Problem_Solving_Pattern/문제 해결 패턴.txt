# 문제 해결 패턴을 배우는 이유
 - 원형이 되는 일반적인 패턴을 배움으로서 문제에 익숙해짐

 - 일반적인 패턴이 모든 문제에 적용되지 않더라도 한 번이라도 풀 수 있다면 유용함


# 빈도수 세기 패턴 (Frequenct Counters)

 - 이 패턴은 알고리즘과 과제에 있는 여러 데이터와 입력값이 서로 비슷한 값으로 구성되어 있는지, 다른 값에 포함되는지 여부 비교
   데이터를 입력값이나 두 개 이상의 빈도 혹은 특정하게 발생하는 빈도와 비교할 때 유용

 - 중첩된 루프와 관련 있거나 n의 제곱 시간을 사용하는 더 쉬운 해결책과 비교했을 때 좋은 패턴


(예제1)
2개의 배열을 허용하는 same이라는 함수를 작성하시오. 
배열의 모든 값이 두 번째 배열에 해당하는 값을 가지면 참을 반환
값이 섞일 수 있지만 값의 빈도는 동일 해야함

same([1,2,3], [4,1,9])  //true
same([1,2,3], [1,9])    //false (2의 제곱인 4가 포함되어 있지 않음)
same([1,2,1], [4,4,1])  //false (3의 제곱인 9가 포함되어 있지 않음)

% Naive Solution(순진한 해결책) - 중첩 루프를 사용

  ㄴ naive Solution: 일반적으로 문제를 해결할 때 가장 확실한 해결책, 스마트하지 않더라도 작업을 완료할 수 있는 해결책 (느리더라도)

function same(arr1, arr2) {
    if(arr1.length !== arr2.length) {   // 배열의 길이를 확인해서 사전 판별
        return false;
    }
    for(let i = 0; i < arr1.length; i++) {
        let correctIndex = arr2.indexOf(arr1[i] ** 2)   // 전체 배열을 반복하거나 중첩 루프의 전체 배열을 잠재적으로 반복
        if(correctIndex === -1) {       // arr1의 숫자를 arr2에 인덱스를 확인하여 제곱 값이 있는지 확인
            return false;
        }
        arr2.splice(correctIndex,1)     // 배열에 제곱값이 있으면 arr2에서 확인한 값을 제거
    }
    return true;
}

이 접근법은 O(n^2) = 루프가 중첩되기 때문 => 가능하면 중첩된 루프를 사용하지 않는 게 좋음

% 빈도 카운터 패턴이 사용된 코드

function same(arr1, arr2) {
    if(arr1.length !== arr2.length) {   // 배열의 길이를 확인해서 사전 판별
        return false;
    }
    let frequencyCounter1 = {}
    let frequencyCounter2 = {}
    for(let val of arr1) {
        frequencyCounter1[val] = (frequencyCounter1[val] || 0) + 1  // arr1의 각 val마다 frequencyCounter에 1을 더하거나 이미 포함되어 있으면 1로 초기화
    }
    for(let val of arr2) {
        frequencyCounter2[val] = (frequencyCounter2[val] || 0) + 1  // arr2의 각 val마다 frequencyCounter에 1을 더하거나 이미 포함되어 있으면 1로 초기화
    }
    for(let key in frequencyCounter1) {
        if(!(key ** 2 in frequencyCounter2)) {  // key값이 두 번째 객체에 있는 확인
            return false
        }
        if(frequencyCounter2[key ** 2] !== frequencyCounter1[key]) {    // 값들의 갯수가 대응하는지 확인
            return false
        }
    }
    return true
}

이 접근법은 O(n) = 선형시간으로 작동하기에 n^2보다 좋음

$ 빈도 카운터에서는 대부분 객체를 사용하여 분석한 결과를 빠르게 비교할 수 있음
  따라서 두 개의 배열을 객체로 세분화하고 각 배열의 요소를 분류한 다음 각 배열을 비교할 수 있음


(예제2) 아나그램
두 개의 문자열을 취하며 두 문자열이 서로의 아나그램이면 참을 반환하는 함수 작성
단, 공백 특문은 고려하지 않고, 모두 소문자로 취급하여 대문자와 소문자를 고려하지 않음

vaildAnagram('', '') // true
vaildAnagram('aaz', 'zza')  // false
vaildAnagram("rat", "car")  // false
vaildAnagram('awesome', 'awesom')   // false
vaildAnagram('qwerty', 'qeywrt')    // true
vaildAnagram('texttwisttime', 'timetwisttext')  // true

function vaildAnagram(first, second){
    if(first.length !== second.length) {
        return false
    }
    
    const lookup = {};

    for(let i = 0; i < first.length; i++) {
        let letter = first[i];
        // if letter exist, incremet. otherwise set to 1
        lookup[letter] ? lookup[letter] += 1 : lookup[letter] = 1;
    }
    for(let i = 0; i < second.length; i++) {
        let letter = second[i];
        // can't find letter or letter is zero then it's not an anagram
        if (!lookup[letter]) {
            return false;
        } else {
            lookup[letter] -= 1;
        }
    }
    return true
}